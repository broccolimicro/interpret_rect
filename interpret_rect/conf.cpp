#include "conf.h"

#include <pgen/default.h>

namespace pgen
{

void conf_t::load(grammar_t &grammar)
{
	CONF = grammar.rules.size();
	grammar.rules.push_back(rule_t(CONF, "conf::conf", true, true));
	BLOCK = grammar.rules.size();
	grammar.rules.push_back(rule_t(BLOCK, "conf::block", true, true));
	_ = grammar.rules.size();
	grammar.rules.push_back(rule_t(_, "conf::_", false, true));
	__ = grammar.rules.size();
	grammar.rules.push_back(rule_t(__, "conf::__", false, true));
	TABLE = grammar.rules.size();
	grammar.rules.push_back(rule_t(TABLE, "conf::table", true, true));
	VALUE = grammar.rules.size();
	grammar.rules.push_back(rule_t(VALUE, "conf::value", true, true));
	SECTION = grammar.rules.size();
	grammar.rules.push_back(rule_t(SECTION, "conf::section", true, true));
	INCLUDE = grammar.rules.size();
	grammar.rules.push_back(rule_t(INCLUDE, "conf::include", true, true));
	TEXT = grammar.rules.size();
	grammar.rules.push_back(rule_t(TEXT, "conf::text", true, true));
	NAME = grammar.rules.size();
	grammar.rules.push_back(rule_t(NAME, "conf::name", true, true));
	INTEGER = grammar.rules.size();
	grammar.rules.push_back(rule_t(INTEGER, "conf::integer", true, true));
	REAL = grammar.rules.size();
	grammar.rules.push_back(rule_t(REAL, "conf::real", true, true));

	symbol_t *n[71];
	n[0] = grammar.insert(new regular_expression("[\\n\\r]+", true));
	n[1] = grammar.insert(new regular_expression("#[^\\n\\r]*", true));
	n[2] = grammar.insert(new regular_expression("[ \\t]*", true));
	n[3] = grammar.insert(new regular_expression("\\\"([^\\\"\\\\]|\\\\.)*\\\"", false));
	n[4] = grammar.insert(new regular_expression("[0-9]+", false));
	n[5] = grammar.insert(new stem(10, false));
	n[6] = grammar.insert(new regular_expression("[-+]", false));
	n[7] = grammar.insert(new regular_expression("e", false));
	n[8] = grammar.insert(new stem(10, false));
	n[9] = grammar.insert(new regular_expression("\\.", false));
	n[10] = grammar.insert(new stem(10, false));
	n[11] = grammar.insert(new regular_expression("[#_a-zA-Z][#_a-zA-Z0-9]*", false));
	n[12] = grammar.insert(new stem(3, true));
	n[13] = grammar.insert(new stem(2, true));
	n[14] = grammar.insert(new regular_expression("end", false));
	n[15] = grammar.insert(new stem(2, true));
	n[16] = grammar.insert(new stem(1, true));
	n[17] = grammar.insert(new stem(3, true));
	n[18] = grammar.insert(new stem(2, true));
	n[19] = grammar.insert(new stem(9, true));
	n[20] = grammar.insert(new stem(2, true));
	n[21] = grammar.insert(new regular_expression("begin", false));
	n[22] = grammar.insert(new stem(3, true));
	n[23] = grammar.insert(new stem(2, true));
	n[24] = grammar.insert(new stem(11, true));
	n[25] = grammar.insert(new stem(2, true));
	n[26] = grammar.insert(new stem(2, true));
	n[27] = grammar.insert(new stem(9, true));
	n[28] = grammar.insert(new stem(2, true));
	n[29] = grammar.insert(new regular_expression("real_table", true));
	n[30] = grammar.insert(new stem(8, true));
	n[31] = grammar.insert(new stem(2, true));
	n[32] = grammar.insert(new stem(9, true));
	n[33] = grammar.insert(new stem(2, true));
	n[34] = grammar.insert(new regular_expression("string_table", true));
	n[35] = grammar.insert(new stem(10, true));
	n[36] = grammar.insert(new stem(2, true));
	n[37] = grammar.insert(new stem(9, true));
	n[38] = grammar.insert(new stem(2, true));
	n[39] = grammar.insert(new regular_expression("int_table", true));
	n[40] = grammar.insert(new stem(3, true));
	n[41] = grammar.insert(new stem(2, true));
	n[42] = grammar.insert(new stem(11, true));
	n[43] = grammar.insert(new stem(2, true));
	n[44] = grammar.insert(new stem(9, true));
	n[45] = grammar.insert(new stem(2, true));
	n[46] = grammar.insert(new regular_expression("real", true));
	n[47] = grammar.insert(new stem(8, true));
	n[48] = grammar.insert(new stem(2, true));
	n[49] = grammar.insert(new stem(9, true));
	n[50] = grammar.insert(new stem(2, true));
	n[51] = grammar.insert(new regular_expression("string", true));
	n[52] = grammar.insert(new stem(10, true));
	n[53] = grammar.insert(new stem(2, true));
	n[54] = grammar.insert(new stem(9, true));
	n[55] = grammar.insert(new stem(2, true));
	n[56] = grammar.insert(new regular_expression("int", true));
	n[57] = grammar.insert(new stem(3, true));
	n[58] = grammar.insert(new stem(2, true));
	n[59] = grammar.insert(new stem(8, true));
	n[60] = grammar.insert(new stem(2, true));
	n[61] = grammar.insert(new regular_expression("include", false));
	n[62] = grammar.insert(new stem(7, true));
	n[63] = grammar.insert(new stem(6, true));
	n[64] = grammar.insert(new stem(5, true));
	n[65] = grammar.insert(new stem(4, true));
	n[66] = grammar.insert(new stem(3, true));
	n[67] = grammar.insert(new stem(2, true));
	n[68] = grammar.insert(new regular_expression("[\\0]", false));
	n[69] = grammar.insert(new stem(2, true));
	n[70] = grammar.insert(new stem(1, true));

	n[0]->next.push_back(NULL);
	n[1]->next.push_back(n[0]);
	n[2]->next.push_back(NULL);
	n[3]->next.push_back(NULL);
	n[4]->next.push_back(NULL);
	n[5]->next.push_back(NULL);
	n[6]->next.push_back(n[5]);
	n[7]->next.push_back(n[6]);
	n[7]->next.push_back(n[5]);
	n[8]->next.push_back(n[7]);
	n[8]->next.push_back(NULL);
	n[9]->next.push_back(n[8]);
	n[10]->next.push_back(n[9]);
	n[10]->next.push_back(n[7]);
	n[10]->next.push_back(NULL);
	n[11]->next.push_back(NULL);
	n[12]->next.push_back(NULL);
	n[13]->next.push_back(n[12]);
	n[14]->next.push_back(n[13]);
	n[15]->next.push_back(n[14]);
	n[16]->next.push_back(n[15]);
	n[17]->next.push_back(n[16]);
	n[18]->next.push_back(n[17]);
	n[19]->next.push_back(n[18]);
	n[20]->next.push_back(n[19]);
	n[21]->next.push_back(n[20]);
	n[22]->next.push_back(NULL);
	n[23]->next.push_back(n[22]);
	n[24]->next.push_back(n[25]);
	n[24]->next.push_back(n[23]);
	n[25]->next.push_back(n[24]);
	n[26]->next.push_back(n[25]);
	n[27]->next.push_back(n[26]);
	n[28]->next.push_back(n[27]);
	n[29]->next.push_back(n[28]);
	n[30]->next.push_back(n[31]);
	n[30]->next.push_back(NULL);
	n[31]->next.push_back(n[30]);
	n[32]->next.push_back(n[31]);
	n[33]->next.push_back(n[32]);
	n[34]->next.push_back(n[33]);
	n[35]->next.push_back(n[36]);
	n[35]->next.push_back(NULL);
	n[36]->next.push_back(n[35]);
	n[37]->next.push_back(n[36]);
	n[38]->next.push_back(n[37]);
	n[39]->next.push_back(n[38]);
	n[40]->next.push_back(NULL);
	n[41]->next.push_back(n[40]);
	n[42]->next.push_back(n[41]);
	n[43]->next.push_back(n[42]);
	n[44]->next.push_back(n[43]);
	n[45]->next.push_back(n[44]);
	n[46]->next.push_back(n[45]);
	n[47]->next.push_back(n[41]);
	n[48]->next.push_back(n[47]);
	n[49]->next.push_back(n[48]);
	n[50]->next.push_back(n[49]);
	n[51]->next.push_back(n[50]);
	n[52]->next.push_back(n[41]);
	n[53]->next.push_back(n[52]);
	n[54]->next.push_back(n[53]);
	n[55]->next.push_back(n[54]);
	n[56]->next.push_back(n[55]);
	n[57]->next.push_back(NULL);
	n[58]->next.push_back(n[57]);
	n[59]->next.push_back(n[58]);
	n[60]->next.push_back(n[59]);
	n[61]->next.push_back(n[60]);
	n[62]->next.push_back(n[67]);
	n[62]->next.push_back(NULL);
	n[63]->next.push_back(n[67]);
	n[63]->next.push_back(NULL);
	n[64]->next.push_back(n[67]);
	n[64]->next.push_back(NULL);
	n[65]->next.push_back(n[67]);
	n[65]->next.push_back(NULL);
	n[66]->next.push_back(n[67]);
	n[66]->next.push_back(NULL);
	n[67]->next.push_back(n[66]);
	n[67]->next.push_back(n[65]);
	n[67]->next.push_back(n[64]);
	n[67]->next.push_back(n[63]);
	n[67]->next.push_back(n[62]);
	n[68]->next.push_back(NULL);
	n[69]->next.push_back(n[68]);
	n[70]->next.push_back(n[69]);

	grammar.rules[0].start.push_back(n[70]);
	grammar.rules[1].start.push_back(n[67]);
	grammar.rules[1].start.push_back(NULL);
	grammar.rules[2].start.push_back(n[2]);
	grammar.rules[3].start.push_back(n[1]);
	grammar.rules[3].start.push_back(n[0]);
	grammar.rules[4].start.push_back(n[39]);
	grammar.rules[4].start.push_back(n[34]);
	grammar.rules[4].start.push_back(n[29]);
	grammar.rules[5].start.push_back(n[56]);
	grammar.rules[5].start.push_back(n[51]);
	grammar.rules[5].start.push_back(n[46]);
	grammar.rules[6].start.push_back(n[21]);
	grammar.rules[7].start.push_back(n[61]);
	grammar.rules[8].start.push_back(n[3]);
	grammar.rules[9].start.push_back(n[11]);
	grammar.rules[10].start.push_back(n[4]);
	grammar.rules[11].start.push_back(n[10]);
}

}

